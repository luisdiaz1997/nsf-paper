# -*- coding: utf-8 -*-
# ---
# jupyter:
#   jupytext:
#     text_representation:
#       extension: .ipy
#       format_name: percent
#       format_version: '1.3'
#       jupytext_version: 1.6.0
#   kernelspec:
#     display_name: Python 3
#     language: python
#     name: python3
# ---

# %%
import numpy as np
import matplotlib.pyplot as plt
from os import path
from pandas import get_dummies
from anndata import AnnData
from scanpy import pp

from utils import misc,preprocess,visualize

dtp = "float32"
pth = "simulations/ggblocks_lr"
dpth = path.join(pth,"data")

# %%
rng = np.random.default_rng(222)
def generate_gg_blocks():
    A = np.zeros( [ 4 , 36 ] )
    A[0, [ 1 , 6 , 7 , 8 , 13 ] ] = 1
    A[1, [ 3 , 4 , 5 , 9 , 11 , 15 , 16 , 17  ] ] = 1
    A[2, [ 18 , 24 , 25 , 30 , 31 , 32 ] ] = 1
    A[3, [ 21 , 22 , 23 , 28 , 34 ] ] = 1
    return A

ncopy = 5
nside = ncopy*6
N = (nside)**2
X = misc.make_grid(N)
X[:,1] = -X[:,1] #make the display the same
X = preprocess.rescale_spatial_coords(X)
J = 500
L = 4
A = generate_gg_blocks()
A = A.reshape((L,6,6))
A = np.kron(A,np.ones((1,ncopy,ncopy)))
Ftrue = A.reshape((L,N)).T #NxL

#%%
w = rng.choice(L,J,replace=True)
Wtrue = 10.9*get_dummies(w).to_numpy(dtype=dtp) #JxL indicator matrix
v = rng.choice(3,J,replace=True)
Vtrue = 8.9*get_dummies(v).to_numpy(dtype=dtp) #Jx2 indicator matrix
Utrue = rng.binomial(1,0.2,size=(N,3))
UVt = Utrue @ Vtrue.T
Lambda_true = 0.2+Ftrue @ Wtrue.T + UVt #NxJ
Y = rng.negative_binomial(10,10/(Lambda_true+10))
visualize.heatmap(X,Y[:,67],s=100,marker="s",cmap="Blues")

#%%
from sklearn.decomposition import NMF
fit = NMF(L,beta_loss="kullback-leibler",solver="mu",init="nndsvda")
Fplot = fit.fit_transform(Y)
hmkw = {"figsize":(4,.9),"bgcol":"white","subplot_space":0.1,"marker":"s","s":10}
fig,axes=visualize.multiheatmap(X, Fplot, (1,4), cmap="Blues", **hmkw)

#%% Save as anndata
ad = AnnData(Y,obsm={"spatial":X,"factors":Ftrue},varm={"loadings":Wtrue})
ad.layers = {"counts":ad.X.copy()} #store raw counts before normalization changes ad.X
pp.normalize_total(ad, inplace=True, layers=None, key_added="sizefactor")
pp.log1p(ad)
ad.write_h5ad(path.join(dpth,"ggblocks_lr.h5ad"),compression="gzip")
visualize.heatmap(ad.obsm["spatial"],ad.obsm["factors"][:,3],s=50,marker="s",figsize=(4.1,4))
