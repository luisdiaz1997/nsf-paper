# -*- coding: utf-8 -*-
# ---
# jupyter:
#   jupytext:
#     text_representation:
#       extension: .ipy
#       format_name: percent
#       format_version: '1.3'
#       jupytext_version: 1.6.0
#   kernelspec:
#     display_name: Python 3
#     language: python
#     name: python3
# ---

# %%
import numpy as np
from os import path
from scanpy import read_h5ad
from tensorflow_probability import math as tm
tfk = tm.psd_kernels

from models import cf,pf,pfh
from utils import preprocess,misc,training,visualize,postprocess

rng = np.random.default_rng()
dtp = "float32"
pth = "simulations/quilt_lr"
dpth = path.join(pth,"data")
mpth = path.join(pth,"models")
plt_pth = path.join(pth,"results/plots")
misc.mkdir_p(plt_pth)

#%% Data loading
ad = read_h5ad(path.join(dpth,"quilt_lr.h5ad"))
J = ad.shape[1]
D,_ = preprocess.anndata_to_train_val(ad, layer="counts", train_frac=1.0,
                                      flip_yaxis=False)
D_n,_ = preprocess.anndata_to_train_val(ad,train_frac=1.0,flip_yaxis=False)
fmeans,D_c,_ = preprocess.center_data(D_n)
X = D["X"] #note this should be identical to Dtr_n["X"]
N = X.shape[0]
Dtf = preprocess.prepare_datasets_tf(D,Dval=None,shuffle=False)
Dtf_n = preprocess.prepare_datasets_tf(D_n,Dval=None,shuffle=False)
Dtf_c = preprocess.prepare_datasets_tf(D_c,Dval=None,shuffle=False)

#%% Save heatmap of true values and sampled data
hmkw = {"figsize":(4,.9),"bgcol":"white","subplot_space":0.1,"marker":"s","s":10}
Ftrue = ad.obsm["factors"]
# heatmap(X,Ftrue,fname="quilt_true_factors.pdf")
fig,axes=visualize.multiheatmap(X, Ftrue, (1,4), cmap="Blues", **hmkw)
fig.savefig(path.join(plt_pth,"quilt_lr_true_factors.png"),bbox_inches='tight')

Yss = rng.choice(D["Y"],replace=False,axis=1,size=4)
Yss = D["Y"][:,(0,3,1,5)]
fig,axes=visualize.multiheatmap(X, Yss, (1,4), cmap="Blues", **hmkw)
fig.savefig(path.join(plt_pth,"quilt_lr_data.png"),bbox_inches='tight')

# %% Initialize inducing poi_sz-constantnts
L = 4
M = N #number of inducing points
Z = X
ker = tfk.MaternThreeHalves

#%% NPF
try:
  pp = path.join(mpth,"L{}/poi_sz-constant/NPF_{}_M{}".format(L,ker.__name__,M))
  tro = training.ModelTrainer.from_pickle(pp)
  fit = tro.model
except FileNotFoundError:
  fit = pf.ProcessFactorization(J,L,Z,psd_kernel=ker,nonneg=True,lik="poi")
  fit.init_loadings(D["Y"],X=X,sz=D["sz"],shrinkage=0.3)
  pp = fit.generate_pickle_path("constant",base=mpth)
  tro = training.ModelTrainer(fit,pickle_path=pp)
  %time tro.train_model(*Dtf) #12 mins
inpf = postprocess.interpret_npf(fit,X,S=100,lda_mode=False)
Fplot = inpf["factors"][:,[0,2,3,1]]
fig,axes=visualize.multiheatmap(X, Fplot, (1,4), cmap="Blues", **hmkw)
fig.savefig(path.join(plt_pth,"quilt_lr_npf.png"),bbox_inches='tight')

#%% NCF
try:
  pp = path.join(mpth,"L{}/poi_sz-constant/NCF".format(L))
  tro = training.ModelTrainer.from_pickle(pp)
  fit = tro.model
except FileNotFoundError:
  fit = cf.CountFactorization(N,J,L,nonneg=True,lik="poi")
  fit.init_loadings(D["Y"],sz=D["sz"],shrinkage=0.3)
  pp = fit.generate_pickle_path("constant",base=mpth)
  tro = training.ModelTrainer(fit,pickle_path=pp)
  %time tro.train_model(*Dtf) #3 mins
incf = postprocess.interpret_ncf(fit,S=100,lda_mode=False)
Fplot = incf["factors"][:,[0,2,3,1]]
fig,axes=visualize.multiheatmap(X, Fplot, (1,4), cmap="Blues", **hmkw)
fig.savefig(path.join(plt_pth,"quilt_lr_ncf.png"),bbox_inches='tight')

#%% NMF from sklearn
from sklearn.decomposition import NMF
fit = NMF(L,beta_loss="kullback-leibler",solver="mu",init="nndsvda")
Fplot = fit.fit_transform(D["Y"])[:,[3,2,1,0]]
fig,axes=visualize.multiheatmap(X, Fplot, (1,4), cmap="Blues", **hmkw)
fig.savefig(path.join(plt_pth,"quilt_lr_nmf.png"),bbox_inches='tight')

#%% PCA from sklearn
from sklearn.decomposition import PCA
fit = PCA(L)
Fplot = fit.fit_transform(D_n["Y"])
fig,axes=visualize.multiheatmap(X, Fplot, (1,4), cmap="RdBu", **hmkw)
fig.savefig(path.join(plt_pth,"quilt_lr_pca.png"),bbox_inches='tight')

#%% MEFISTO-Gaussian
from models.mefisto import MEFISTO
pp = path.join(mpth,"L{}/gau/MEFISTO_M{}".format(L,M))
try:
  mef = MEFISTO.from_pickle(pp)
except FileNotFoundError:
  mef = MEFISTO(D_n, L, inducing_pts=M, pickle_path=pp)
  %time mef.train() #also saves to pickle file- 4min
Fplot = mef.get_factors()
fig,axes=visualize.multiheatmap(X, Fplot, (1,4), cmap="RdBu", **hmkw)
fig.savefig(path.join(plt_pth,"quilt_lr_mefisto.png"),bbox_inches='tight')

#%% RCF: Non-spatial, real-valued
try:
  pp = path.join(mpth,"L{}/gau/RCF".format(L))
  tro = training.ModelTrainer.from_pickle(pp)
  fit = tro.model
except FileNotFoundError:
  fit = cf.CountFactorization(N, J, L, nonneg=False, lik="gau",
                              feature_means=fmeans)
  fit.init_loadings(D_c["Y"])
  pp = fit.generate_pickle_path(None,base=mpth)
  tro = training.ModelTrainer(fit,pickle_path=pp)
  %time tro.train_model(*Dtf_c) #14sec
Fplot = misc.t2np(fit.sample_latent_factors(S=100))
fig,axes=visualize.multiheatmap(X, Fplot, (1,4), cmap="RdBu", **hmkw)
fig.savefig(path.join(plt_pth,"quilt_lr_rcf.png"),bbox_inches='tight')

#%% RPF
try:
  pp = path.join(mpth,"L{}/gau/RPF_{}_M{}".format(L,ker.__name__,M))
  tro = training.ModelTrainer.from_pickle(pp)
  fit = tro.model
except FileNotFoundError:
  fit = pf.ProcessFactorization(J,L,Z,psd_kernel=ker,nonneg=False,lik="gau")
  fit.init_loadings(D_c["Y"],X=X)
  pp = fit.generate_pickle_path(None,base=mpth)
  tro = training.ModelTrainer(fit,pickle_path=pp)
  %time tro.train_model(*Dtf_c) #5 mins
Fplot = misc.t2np(fit.sample_latent_GP_funcs(X, S=100, chol=False)).T
fig,axes=visualize.multiheatmap(X, Fplot, (1,4), cmap="RdBu", **hmkw)
fig.savefig(path.join(plt_pth,"quilt_lr_rpf.png"),bbox_inches='tight')

#%% NPFH
try:
  pp = path.join(mpth,"L7/poi_sz-constant/NPFH_T4_{}_M{}".format(ker.__name__,M))
  tro = training.ModelTrainer.from_pickle(pp)
  fit = tro.model
except FileNotFoundError:
  fit = pfh.ProcessFactorizationHybrid(N, J, 7, Z, T=4, psd_kernel=ker,
                                       nonneg=True, lik="poi")
  fit.init_loadings(D["Y"],X=X,sz=D["sz"],shrinkage=0.3)
  pp = fit.generate_pickle_path("constant",base=mpth)
  tro = training.ModelTrainer(fit,pickle_path=pp)
  %time tro.train_model(*Dtf) #3 mins
inpfh = postprocess.interpret_npfh(fit,X,S=100,lda_mode=False)
Fplot = inpfh["spatial"]["factors"][:,[2,3,1,0]]
fig,axes=visualize.multiheatmap(X, Fplot, (1,4), cmap="Blues", **hmkw)
fig.savefig(path.join(plt_pth,"quilt_lr_npfh_spat.png"),bbox_inches='tight')
# Fplot = inpfh["nonspatial"]["factors"]
# fig,axes=visualize.multiheatmap(X, Fplot, (1,2), cmap="Blues", **hmkw)
# fig.savefig(path.join(plt_pth,"quilt_lr_npfh_nsp.png"),bbox_inches='tight')
