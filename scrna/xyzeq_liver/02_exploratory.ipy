# -*- coding: utf-8 -*-
# ---
# jupyter:
#   jupytext:
#     text_representation:
#       extension: .ipy
#       format_name: percent
#       format_version: '1.3'
#       jupytext_version: 1.6.0
#   kernelspec:
#     display_name: Python 3
#     language: python
#     name: python3
# ---

#%% imports
import numpy as np
import pandas as pd
from os import path
from math import ceil
from scanpy import read_h5ad
# from matplotlib import pyplot as plt
from tensorflow_probability import math as tm
tfk = tm.psd_kernels

from models import pf,pfh,cf
from utils import preprocess,training,misc,visualize,postprocess

dtp = "float32"
pth = "scrna/xyzeq_liver"
dpth = path.join(pth,"data")
mpth = path.join(pth,"models")
rpth = path.join(pth,"results")
plt_pth = path.join(rpth,"plots")

# %% Data Loading from scanpy
J = 2000
dfile = path.join(dpth,"xyzeq_liver_L20C1_mouseonly_J{}.h5ad".format(J))
ad = read_h5ad(dfile)
D,fmeans = preprocess.load_data(dfile,sz="scanpy")
Dtr = D["raw"]["tr"]
Xtr = Dtr["X"]
Ntr = Xtr.shape[0]
Ytr = Dtr["Y"]

#%% NCF: Non-spatial, nonnegative
L = 12
try:
  pp = path.join(mpth,"L{}/poi_sz-scanpy/NCF".format(L))
  tro = training.ModelTrainer.from_pickle(pp)
  fit = tro.model
except FileNotFoundError:
  fit = cf.CountFactorization(Ntr, J, L, lik="poi", nonneg=True)
  fit.elbo_avg(Ytr,sz=Dtr["sz"],idx=Dtr["idx"])
  fit.init_loadings(Ytr,sz=Dtr["sz"])
  pp = fit.generate_pickle_path("scanpy",base=mpth)
  tro = training.ModelTrainer(fit,pickle_path=pp)
  %time tro.train_model(D["raw"]["tf"][0],D["raw"]["tf"][1])
ttl = "NCF: nonspatial, non-negative factors, Poisson likelihood"
visualize.plot_loss(tro.loss,title=ttl)#,ss=range(2000,4000))
#dev_ncf = visualize.gof(fit,Dtr,Dval=Dval,title=ttl)
#%% Postprocess
incf = postprocess.interpret_ncf(fit,S=10,lda_mode=False)
fig,axes=visualize.multiheatmap(Xtr, np.sqrt(incf["factors"]), (3,4),
                                figsize=(6,4), s=.3, marker="D",
                                subplot_space=0, spinecolor="white")

# %% initialize inducing points and tuning parameters
Z = misc.kmeans_inducing_pts(Xtr, Ntr)
M = Z.shape[0]
ker = tfk.MaternThreeHalves
#find mapping between Xtr and Z
from scipy.spatial.distance import cdist
ZX = 1-(cdist(Z,Xtr)>0) #Ntr x M matrix
Yz = ZX@Ytr #sum across cells in the same spatial well

#%% NPF: Spatial only with non-negative factors
L = 12 #number of latent factors, ideally divisible by 2
try:
  pp = path.join(mpth,"L{}/poi_sz-scanpy/NPF_{}_M{}".format(L,ker.__name__,M))
  tro = training.ModelTrainer.from_pickle(pp)
  fit = tro.model
except FileNotFoundError:
  fit = pf.ProcessFactorization(J,L,Z,psd_kernel=ker,nonneg=True,lik="poi")
  fit.elbo_avg(Xtr,Ytr,sz=Dtr["sz"])
  fit.init_loadings(Ytr,X=Xtr,sz=Dtr["sz"])
  fit.elbo_avg(Xtr,Ytr,sz=Dtr["sz"])
  pp = fit.generate_pickle_path("scanpy",base=mpth)
  tro = training.ModelTrainer(fit,pickle_path=pp)
  %time tro.train_model(*D["raw"]["tf"]) #4.5 mins
ttl = "NPF: spatial, non-negative factors, Poisson likelihood"
visualize.plot_loss(tro.loss,title=ttl)#,ss=range(2000,4000))
#dev_npf=visualize.gof(fit,Dtr,Dval=Dval,title=ttl)
#%% Postprocessing
inpf = postprocess.interpret_npf(fit,Xtr,S=100,lda_mode=False)
fig,axes=visualize.multiheatmap(Xtr, np.sqrt(inpf["factors"]), (4,3), figsize=(4,4),
                                s=8, marker='$\u25AE$', subplot_space=0,
                                spinecolor="white")
fig.savefig(path.join(plt_pth,"xyz_liv_heatmap_npf12_spde.pdf"),bbox_inches='tight')
#%% Top genes for each latent dimensions
topgenes = inpf["loadings"].argmax(axis=0).tolist()
tgnames = ad.var_names[topgenes] #Hal is hepatocyte marker (2nd dim)

#%% NPF Hybrid object
L = 6
try:
  T = ceil(L/2)
  pp = path.join(pth,"models/L{}/poi_sz-scanpy/NPFH_T{}_{}_M{}".format(L,T,ker.__name__, M))
  tro = training.ModelTrainer.from_pickle(pp)
  fit = tro.model
except FileNotFoundError:
  fit = pfh.ProcessFactorizationHybrid(Ntr, J, L, Z, lik="poi", nonneg=True,
                                       psd_kernel=ker)
  fit.elbo_avg(**Dtr)
  fit.init_loadings(Ytr,X=Xtr,sz=Dtr["sz"],shrinkage=0.2)
  pp = fit.generate_pickle_path("scanpy",base=mpth)
  tro = training.ModelTrainer(fit,pickle_path=pp)
  %time tro.train_model(*D['raw']['tf']) #6min
ttl = "NPFH: spatial, non-negative factors, Poisson likelihood"
visualize.plot_loss(tro.loss,title=ttl)#,ss=range(200,240))
#dev_npfh =visualize.gof(fit,Dtr,Dval=Dval,title=ttl)
# %% NPFH: postprocess SPDE style
hmkw = {"figsize":(6,2),"s":30,"marker":"$\u25AE$","subplot_space":0,"spinecolor":"white"}
inpfh = postprocess.interpret_npfh(fit,Z,S=10,lda_mode=False)
tgnames = [str(i) for i in range(1,T+1)]
fig,axes=visualize.multiheatmap(Z, np.sqrt(inpfh["spatial"]["factors"]),
                                (1,3), **hmkw)
visualize.set_titles(fig, tgnames, x=0.05, y=.85, fontsize="medium", c="white",
                     ha="left", va="top")
fig.savefig(path.join(plt_pth,"xyz_liv_heatmap_npfh{}_spde_spat.pdf".format(L)),
            bbox_inches='tight')
# fig,axes=visualize.multiheatmap(Xtr, np.sqrt(inpfh["nonspatial"]["factors"]),
#                                 (1,3), **hmkw)
# visualize.set_titles(fig, tgnames, x=0.05, y=.85, fontsize="medium", c="white",
#                      ha="left", va="top")
# fig.savefig(path.join(plt_pth,"xyz_liv_heatmap_npfh{}_spde_nsp.pdf".format(L)),
#             bbox_inches='tight')
#%% Top genes for each latent dimension
inpfh = postprocess.interpret_npfh(fit,Xtr,S=10,lda_mode=False)
W = inpfh["spatial"]["loadings"]#*inpf["totals"][:,None]
W[np.isnan(W)] = 0.0
V = inpfh["nonspatial"]["loadings"]
V[np.isnan(V)] = 0.0
topgenes = W.argmax(axis=0).tolist()
tgnames = ad.var.index[topgenes]
Ytg = Yz[:,topgenes]/(ZX@Dtr["sz"])
fig,axes=visualize.multiheatmap(Z, np.sqrt(Ytg), (1,3), **hmkw)
visualize.set_titles(fig, tgnames, x=0.44, y=.9, fontsize="medium", c="white",
                     ha="left", va="top")
fig.savefig(path.join(plt_pth,
                      "xyz_liv_heatmap_npfh{}_spde_spat_genes.pdf".format(L)),
            bbox_inches='tight')
#save loadings to disk for further interpretation
WV = np.hstack((W,V))*inpfh["totals"][:,None]
WVdf=pd.DataFrame(WV, index=ad.var.index, columns=range(1,L+1))
WVdf.to_csv(path.join(rpth,"xyz_liv_npfh{}_spde_loadings.csv".format(L)))
#%% spatial importance per gene
alpha = inpfh["spatial"]["loadings"].sum(axis=1)
pd1 = pd.DataFrame({"gene":ad.var_names, "data":"xyzeq_liver",
                    "L":L, "T":T, "spatial_wt":alpha})
pd1.spatial_wt.hist(bins=100)
pd1.to_csv(path.join(rpth,"NPFH_spatial_gene_weights_L{}_T{}.csv".format(L,T)),
           index=False)
# %% relative importance of each factor
pd2 = postprocess.npfh_factor_importance(inpfh,lda_mode=False)
pd2.plot.bar(x="factor_type",y="weight")
pd2.to_csv(path.join(rpth,"NPFH_dim_weights_spde_L{}_T{}.csv".format(L,T)),
           index=False)

# %% Postprocess LDA style
inpfh = postprocess.interpret_npfh(fit,Xtr,S=10,lda_mode=True)
# fig,axes=visualize.multiheatmap(Xtr, np.sqrt(inpfh["spatial"]["factors"]),
#                                 (2,4), **hmkw)
# fig.savefig(path.join(plt_pth,"xyz_liv_heatmap_npfh16_lda_spat.pdf"),bbox_inches='tight')
# fig,axes=visualize.multiheatmap(Xtr, np.sqrt(inpfh["nonspatial"]["factors"]),
#                                 (2,4), **hmkw)
# fig.savefig(path.join(plt_pth,"xyz_liv_heatmap_npfh16_lda_nsp.pdf"),bbox_inches='tight')
#%% spatial importance per cell
alpha = inpfh["spatial"]["factors"].sum(axis=1)
pd1 = pd.DataFrame({"data":"xyzeq_liver", "L":L, "T":T, "spatial_wt":alpha})
pd1.spatial_wt.hist(bins=100)
pd1.to_csv(path.join(rpth,"NPFH_spatial_cell_weights_L{}_T{}.csv".format(L,T)),
           index=False)
# %% relative importance of each factor
pd2 = postprocess.npfh_factor_importance(inpfh,lda_mode=True)
pd2.plot.bar(x="factor_type",y="weight")
pd2.to_csv(path.join(rpth,"NPFH_dim_weights_lda_L{}_T{}.csv".format(L,T)),
           index=False)
